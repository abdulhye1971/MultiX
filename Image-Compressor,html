<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Compressor</title>
    <style>
        :root {
            --background: #0f0820;
            --gradient-start: #24103f;
            --gradient-end: #4b1f7a;
            --card-bg: rgba(255, 255, 255, 0.05);
            --accent: #9B7BFF;
            --secondary-accent: #FFD966;
            --text: #E4E4E4;
            --success: #4CAF50;
            --error: #f44336;
            --warning: #ff9800;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif;
            background: linear-gradient(135deg, var(--gradient-start), var(--gradient-end));
            color: var(--text);
            line-height: 1.6;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        header {
            text-align: center;
            margin-bottom: 2rem;
        }

        h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            background: linear-gradient(90deg, var(--accent), var(--secondary-accent));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            font-weight: 700;
        }

        .subtitle {
            font-size: 1.1rem;
            opacity: 0.8;
            margin-bottom: 1.5rem;
        }

        .card {
            background: var(--card-bg);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            margin-bottom: 1.5rem;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.3);
        }

        .upload-area {
            border: 2px dashed rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 1.5rem;
        }

        .upload-area:hover, .upload-area.dragover {
            border-color: var(--accent);
            background: rgba(155, 123, 255, 0.1);
        }

        .upload-area p {
            margin-bottom: 1rem;
        }

        .button-group {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            justify-content: center;
            margin-bottom: 1.5rem;
        }

        button {
            background: var(--accent);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.75rem 1.5rem;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        button:hover, button:focus {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(155, 123, 255, 0.4);
            outline: none;
        }

        button.secondary {
            background: var(--secondary-accent);
            color: #333;
        }

        button.secondary:hover, button.secondary:focus {
            box-shadow: 0 6px 20px rgba(255, 217, 102, 0.4);
        }

        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .settings {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .setting-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        label {
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        input[type="range"], input[type="number"] {
            width: 100%;
            padding: 0.5rem;
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            background: rgba(0, 0, 0, 0.2);
            color: var(--text);
        }

        input[type="range"] {
            -webkit-appearance: none;
            height: 6px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 3px;
        }

        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: var(--accent);
            cursor: pointer;
        }

        input[type="range"]::-moz-range-thumb {
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: var(--accent);
            cursor: pointer;
            border: none;
        }

        .file-list {
            margin-top: 1.5rem;
        }

        .file-item {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .file-item:last-child {
            border-bottom: none;
        }

        .file-preview {
            width: 60px;
            height: 60px;
            border-radius: 8px;
            object-fit: cover;
            background: rgba(0, 0, 0, 0.2);
        }

        .file-info {
            flex: 1;
        }

        .file-name {
            font-weight: 600;
            margin-bottom: 0.25rem;
            word-break: break-word;
        }

        .file-size {
            font-size: 0.85rem;
            opacity: 0.7;
        }

        .file-status {
            font-size: 0.85rem;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-weight: 600;
        }

        .status-queued {
            background: rgba(255, 255, 255, 0.1);
        }

        .status-processing {
            background: var(--warning);
            color: #333;
        }

        .status-done {
            background: var(--success);
            color: white;
        }

        .status-error {
            background: var(--error);
            color: white;
        }

        .file-actions {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn {
            padding: 0.5rem;
            border-radius: 6px;
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: var(--text);
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .action-btn:hover {
            background: var(--accent);
            transform: translateY(-2px);
        }

        .results-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .results-summary {
            font-weight: 600;
            font-size: 1.1rem;
        }

        .batch-actions {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .progress-container {
            margin-top: 1rem;
        }

        .progress-bar {
            height: 8px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 0.5rem;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--accent), var(--secondary-accent));
            border-radius: 4px;
            transition: width 0.3s ease;
            width: 0%;
        }

        .progress-text {
            font-size: 0.9rem;
            text-align: center;
        }

        .compressed-results {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .result-card {
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .result-preview {
            width: 100%;
            height: 200px;
            object-fit: contain;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .result-info {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .result-stats {
            display: flex;
            justify-content: space-between;
            font-size: 0.9rem;
        }

        .size-saved {
            color: var(--success);
            font-weight: 600;
        }

        .result-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .result-actions button {
            flex: 1;
        }

        .hidden {
            display: none;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            background: var(--card-bg);
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            border-left: 4px solid var(--accent);
            transform: translateX(120%);
            transition: transform 0.3s ease;
            z-index: 1000;
            max-width: 350px;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            border-left-color: var(--success);
        }

        .notification.error {
            border-left-color: var(--error);
        }

        .notification.warning {
            border-left-color: var(--warning);
        }

        .drag-handle {
            cursor: grab;
            opacity: 0.7;
            padding: 0.25rem;
        }

        .drag-handle:hover {
            opacity: 1;
        }

        @media (max-width: 768px) {
            .button-group {
                flex-direction: column;
            }
            
            .settings {
                grid-template-columns: 1fr;
            }
            
            .file-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }
            
            .file-actions {
                align-self: flex-end;
            }
            
            .results-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .batch-actions {
                width: 100%;
            }
            
            .batch-actions button {
                flex: 1;
            }
        }

        @media (max-width: 480px) {
            body {
                padding: 10px;
            }
            
            .card {
                padding: 1rem;
            }
            
            .upload-area {
                padding: 1.5rem;
            }
            
            h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Image Compressor</h1>
            <p class="subtitle">Compress multiple images in your browser - no server upload required</p>
        </header>

        <main>
            <div class="card">
                <div class="upload-area" id="uploadArea">
                    <p>Drag & drop images here or click to select</p>
                    <p class="file-support">Supports: JPEG, PNG, GIF, WebP (Max 5MB per file)</p>
                    <div class="button-group">
                        <button id="copyUploadBtn" class="primary">
                            <span>Copy Upload Your Image</span>
                        </button>
                        <button id="compressBtn" class="secondary" disabled>
                            <span>Compress Image</span>
                        </button>
                    </div>
                </div>

                <input type="file" id="fileInput" multiple accept="image/jpeg,image/jpg,image/png,image/gif,image/webp" class="hidden">

                <div class="settings">
                    <div class="setting-group">
                        <label for="qualitySlider">
                            <span>Compression Quality</span>
                            <span id="qualityValue">0.8</span>
                        </label>
                        <input type="range" id="qualitySlider" min="0.1" max="1.0" step="0.05" value="0.8">
                        <small>Affects JPEG/WebP compression (lower = smaller file size)</small>
                    </div>
                    <div class="setting-group">
                        <label for="maxWidthInput">Max Width (px)</label>
                        <input type="number" id="maxWidthInput" placeholder="Original width" min="1">
                        <small>Resize to max width (preserves aspect ratio)</small>
                    </div>
                    <div class="setting-group">
                        <label for="maxHeightInput">Max Height (px)</label>
                        <input type="number" id="maxHeightInput" placeholder="Original height" min="1">
                        <small>Resize to max height (preserves aspect ratio)</small>
                    </div>
                </div>

                <div class="file-list" id="fileList">
                    <!-- File items will be dynamically added here -->
                </div>

                <div class="progress-container hidden" id="progressContainer">
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill"></div>
                    </div>
                    <div class="progress-text" id="progressText">Processing images...</div>
                </div>
            </div>

            <div class="card hidden" id="resultsCard">
                <div class="results-header">
                    <div class="results-summary" id="resultsSummary"></div>
                    <div class="batch-actions">
                        <button id="selectAllBtn" class="secondary">Select All</button>
                        <button id="downloadSelectedBtn" class="secondary">Download Selected</button>
                        <button id="saveReportBtn" class="secondary">Save Report</button>
                    </div>
                </div>
                <div class="compressed-results" id="compressedResults">
                    <!-- Compressed result cards will be dynamically added here -->
                </div>
            </div>
        </main>
    </div>

    <div class="notification" id="notification"></div>

    <script>
        // DOM Elements
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        const copyUploadBtn = document.getElementById('copyUploadBtn');
        const compressBtn = document.getElementById('compressBtn');
        const fileList = document.getElementById('fileList');
        const qualitySlider = document.getElementById('qualitySlider');
        const qualityValue = document.getElementById('qualityValue');
        const maxWidthInput = document.getElementById('maxWidthInput');
        const maxHeightInput = document.getElementById('maxHeightInput');
        const progressContainer = document.getElementById('progressContainer');
        const progressFill = document.getElementById('progressFill');
        const progressText = document.getElementById('progressText');
        const resultsCard = document.getElementById('resultsCard');
        const resultsSummary = document.getElementById('resultsSummary');
        const compressedResults = document.getElementById('compressedResults');
        const selectAllBtn = document.getElementById('selectAllBtn');
        const downloadSelectedBtn = document.getElementById('downloadSelectedBtn');
        const saveReportBtn = document.getElementById('saveReportBtn');
        const notification = document.getElementById('notification');

        // State
        let files = [];
        let compressedImages = [];
        let isProcessing = false;
        let selectAllState = false;

        // Load settings from localStorage
        function loadSettings() {
            const savedQuality = localStorage.getItem('compressionQuality');
            const savedMaxWidth = localStorage.getItem('maxWidth');
            const savedMaxHeight = localStorage.getItem('maxHeight');
            
            if (savedQuality) {
                qualitySlider.value = savedQuality;
                qualityValue.textContent = savedQuality;
            }
            
            if (savedMaxWidth) maxWidthInput.value = savedMaxWidth;
            if (savedMaxHeight) maxHeightInput.value = savedMaxHeight;
        }

        // Save settings to localStorage
        function saveSettings() {
            localStorage.setItem('compressionQuality', qualitySlider.value);
            localStorage.setItem('maxWidth', maxWidthInput.value);
            localStorage.setItem('maxHeight', maxHeightInput.value);
        }

        // Show notification
        function showNotification(message, type = 'info', duration = 3000) {
            notification.textContent = message;
            notification.className = `notification ${type}`;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, duration);
        }

        // Format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Check if file is valid
        function isValidFile(file) {
            const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
            const maxSize = 5 * 1024 * 1024; // 5MB
            
            if (!validTypes.includes(file.type)) {
                showNotification(`Unsupported file type: ${file.type}`, 'error');
                return false;
            }
            
            if (file.size > maxSize) {
                showNotification(`File too large: ${file.name} (${formatFileSize(file.size)})`, 'error');
                return false;
            }
            
            return true;
        }

        // Handle file selection
        function handleFiles(selectedFiles) {
            const validFiles = Array.from(selectedFiles).filter(isValidFile);
            
            if (validFiles.length === 0) return;
            
            // Add new files to existing ones (up to 50)
            files = [...files, ...validFiles].slice(0, 50);
            
            updateFileList();
            compressBtn.disabled = files.length === 0;
            
            showNotification(`Added ${validFiles.length} image(s)`, 'success');
        }

        // Update file list UI
        function updateFileList() {
            fileList.innerHTML = '';
            
            files.forEach((file, index) => {
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.innerHTML = `
                    <img class="file-preview" src="${URL.createObjectURL(file)}" alt="${file.name}">
                    <div class="file-info">
                        <div class="file-name">${file.name}</div>
                        <div class="file-size">${formatFileSize(file.size)}</div>
                    </div>
                    <div class="file-status status-queued">Queued</div>
                    <div class="file-actions">
                        <button class="action-btn remove-btn" data-index="${index}" title="Remove">
                            <span>🗑️</span>
                        </button>
                    </div>
                `;
                fileList.appendChild(fileItem);
            });
            
            // Add event listeners for remove buttons
            document.querySelectorAll('.remove-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const index = parseInt(e.currentTarget.getAttribute('data-index'));
                    files.splice(index, 1);
                    updateFileList();
                    compressBtn.disabled = files.length === 0;
                });
            });
        }

        // Compress a single image
        function compressImage(file, quality, maxWidth, maxHeight) {
            return new Promise((resolve, reject) => {
                const img = new Image();
                const url = URL.createObjectURL(file);
                
                img.onload = () => {
                    URL.revokeObjectURL(url);
                    
                    // Calculate new dimensions preserving aspect ratio
                    let { width, height } = img;
                    
                    if (maxWidth && img.width > maxWidth) {
                        const ratio = maxWidth / img.width;
                        width = maxWidth;
                        height = img.height * ratio;
                    }
                    
                    if (maxHeight && height > maxHeight) {
                        const ratio = maxHeight / height;
                        height = maxHeight;
                        width = width * ratio;
                    }
                    
                    // Create canvas for compression
                    const canvas = document.createElement('canvas');
                    canvas.width = Math.round(width);
                    canvas.height = Math.round(height);
                    
                    const ctx = canvas.getContext('2d');
                    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                    
                    // Determine output format
                    let outputType = 'image/jpeg';
                    let outputQuality = quality;
                    
                    // Keep PNG as PNG if it has transparency
                    if (file.type === 'image/png' && hasTransparency(ctx, canvas)) {
                        outputType = 'image/png';
                        outputQuality = 1.0; // PNG doesn't use quality parameter
                    }
                    
                    // Convert to blob
                    canvas.toBlob(
                        (blob) => {
                            if (!blob) {
                                reject(new Error('Compression failed'));
                                return;
                            }
                            
                            resolve({
                                original: file,
                                compressed: blob,
                                originalSize: file.size,
                                compressedSize: blob.size,
                                width: canvas.width,
                                height: canvas.height,
                                type: outputType
                            });
                        },
                        outputType,
                        outputQuality
                    );
                };
                
                img.onerror = () => {
                    URL.revokeObjectURL(url);
                    reject(new Error('Failed to load image'));
                };
                
                img.src = url;
            });
        }

        // Check if image has transparency
        function hasTransparency(ctx, canvas) {
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;
            
            for (let i = 3; i < data.length; i += 4) {
                if (data[i] < 255) {
                    return true;
                }
            }
            
            return false;
        }

        // Process all images sequentially
        async function processAllImages() {
            if (isProcessing || files.length === 0) return;
            
            isProcessing = true;
            compressBtn.disabled = true;
            progressContainer.classList.remove('hidden');
            compressedImages = [];
            
            const quality = parseFloat(qualitySlider.value);
            const maxWidth = maxWidthInput.value ? parseInt(maxWidthInput.value) : null;
            const maxHeight = maxHeightInput.value ? parseInt(maxHeightInput.value) : null;
            
            // Save settings
            saveSettings();
            
            let processedCount = 0;
            let totalSizeSaved = 0;
            let totalOriginalSize = 0;
            
            for (let i = 0; i < files.length; i++) {
                // Update progress
                const progress = ((i + 1) / files.length) * 100;
                progressFill.style.width = `${progress}%`;
                progressText.textContent = `Processing ${i + 1} of ${files.length}: ${files[i].name}`;
                
                // Update file status
                const statusElements = document.querySelectorAll('.file-status');
                if (statusElements[i]) {
                    statusElements[i].className = 'file-status status-processing';
                    statusElements[i].textContent = 'Processing';
                }
                
                try {
                    const result = await compressImage(files[i], quality, maxWidth, maxHeight);
                    compressedImages.push(result);
                    
                    // Update file status
                    if (statusElements[i]) {
                        statusElements[i].className = 'file-status status-done';
                        statusElements[i].textContent = 'Done';
                    }
                    
                    processedCount++;
                    totalSizeSaved += result.originalSize - result.compressedSize;
                    totalOriginalSize += result.originalSize;
                    
                } catch (error) {
                    console.error(`Error compressing ${files[i].name}:`, error);
                    
                    // Update file status
                    if (statusElements[i]) {
                        statusElements[i].className = 'file-status status-error';
                        statusElements[i].textContent = 'Error';
                    }
                    
                    showNotification(`Failed to compress ${files[i].name}`, 'error');
                }
            }
            
            // Update UI with results
            showResults(processedCount, totalSizeSaved, totalOriginalSize);
            
            isProcessing = false;
            progressText.textContent = `Completed: ${processedCount} of ${files.length} images processed`;
            
            showNotification(`Compression complete! Processed ${processedCount} images`, 'success');
        }

        // Show compression results
        function showResults(processedCount, totalSizeSaved, totalOriginalSize) {
            resultsCard.classList.remove('hidden');
            
            // Update summary
            const percentSaved = totalOriginalSize > 0 ? (totalSizeSaved / totalOriginalSize * 100).toFixed(1) : 0;
            resultsSummary.textContent = 
                `${processedCount} images compressed • Saved ${formatFileSize(totalSizeSaved)} (${percentSaved}%)`;
            
            // Clear previous results
            compressedResults.innerHTML = '';
            
            // Add result cards
            compressedImages.forEach((result, index) => {
                const percentSaved = ((result.originalSize - result.compressedSize) / result.originalSize * 100).toFixed(1);
                const previewUrl = URL.createObjectURL(result.compressed);
                
                const resultCard = document.createElement('div');
                resultCard.className = 'result-card card';
                resultCard.innerHTML = `
                    <img class="result-preview" src="${previewUrl}" alt="${result.original.name}">
                    <div class="result-info">
                        <div class="file-name">${result.original.name}</div>
                        <div class="result-stats">
                            <span>${formatFileSize(result.originalSize)} → ${formatFileSize(result.compressedSize)}</span>
                            <span class="size-saved">${percentSaved}% saved</span>
                        </div>
                        <div class="result-stats">
                            <span>${result.width}×${result.height}</span>
                            <span>${result.type.split('/')[1].toUpperCase()}</span>
                        </div>
                        <div class="result-actions">
                            <button class="download-btn" data-index="${index}">Download</button>
                            <button class="copy-btn" data-index="${index}">Copy</button>
                            <input type="checkbox" class="select-checkbox" data-index="${index}" checked>
                        </div>
                    </div>
                `;
                compressedResults.appendChild(resultCard);
            });
            
            // Add event listeners for result actions
            document.querySelectorAll('.download-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const index = parseInt(e.currentTarget.getAttribute('data-index'));
                    downloadCompressedImage(index);
                });
            });
            
            document.querySelectorAll('.copy-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const index = parseInt(e.currentTarget.getAttribute('data-index'));
                    copyCompressedImage(index);
                });
            });
        }

        // Download a compressed image
        function downloadCompressedImage(index) {
            const result = compressedImages[index];
            const url = URL.createObjectURL(result.compressed);
            const a = document.createElement('a');
            a.href = url;
            
            // Create filename with compressed suffix
            const nameParts = result.original.name.split('.');
            const extension = result.type.split('/')[1];
            nameParts[nameParts.length - 1] = extension;
            nameParts.splice(nameParts.length - 1, 0, 'compressed');
            a.download = nameParts.join('.');
            
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            
            // Clean up URL after a short delay
            setTimeout(() => URL.revokeObjectURL(url), 100);
        }

        // Copy a compressed image to clipboard
        async function copyCompressedImage(index) {
            const result = compressedImages[index];
            
            try {
                // Convert blob to data URL
                const reader = new FileReader();
                reader.onload = async () => {
                    try {
                        // For modern browsers
                        if (navigator.clipboard && window.ClipboardItem) {
                            const blob = result.compressed;
                            const item = new ClipboardItem({
                                [blob.type]: blob
                            });
                            await navigator.clipboard.write([item]);
                            showNotification('Image copied to clipboard!', 'success');
                        } else {
                            // Fallback for older browsers
                            const dataURL = reader.result;
                            const tempTextArea = document.createElement('textarea');
                            tempTextArea.value = dataURL;
                            document.body.appendChild(tempTextArea);
                            tempTextArea.select();
                            document.execCommand('copy');
                            document.body.removeChild(tempTextArea);
                            showNotification('Image data URL copied to clipboard!', 'success');
                        }
                    } catch (error) {
                        console.error('Error copying to clipboard:', error);
                        showNotification('Failed to copy image to clipboard', 'error');
                    }
                };
                reader.readAsDataURL(result.compressed);
            } catch (error) {
                console.error('Error preparing image for clipboard:', error);
                showNotification('Failed to prepare image for clipboard', 'error');
            }
        }

        // Download selected images
        function downloadSelectedImages() {
            const checkboxes = document.querySelectorAll('.select-checkbox:checked');
            
            if (checkboxes.length === 0) {
                showNotification('No images selected', 'warning');
                return;
            }
            
            // Download each selected image sequentially with a small delay
            checkboxes.forEach((checkbox, index) => {
                setTimeout(() => {
                    const imageIndex = parseInt(checkbox.getAttribute('data-index'));
                    downloadCompressedImage(imageIndex);
                }, index * 300); // Small delay to avoid browser blocking multiple downloads
            });
            
            showNotification(`Downloading ${checkboxes.length} images...`, 'info');
        }

        // Toggle select all checkboxes
        function toggleSelectAll() {
            const checkboxes = document.querySelectorAll('.select-checkbox');
            selectAllState = !selectAllState;
            
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAllState;
            });
            
            selectAllBtn.textContent = selectAllState ? 'Deselect All' : 'Select All';
        }

        // Save report as JSON
        function saveReport() {
            const report = compressedImages.map(result => ({
                filename: result.original.name,
                originalSize: result.originalSize,
                compressedSize: result.compressedSize,
                percentSaved: ((result.originalSize - result.compressedSize) / result.originalSize * 100).toFixed(1),
                dimensions: `${result.width}x${result.height}`,
                type: result.type
            }));
            
            const reportData = {
                summary: {
                    totalImages: report.length,
                    totalOriginalSize: report.reduce((sum, item) => sum + item.originalSize, 0),
                    totalCompressedSize: report.reduce((sum, item) => sum + item.compressedSize, 0),
                    totalSaved: report.reduce((sum, item) => sum + (item.originalSize - item.compressedSize), 0)
                },
                images: report
            };
            
            const dataStr = JSON.stringify(reportData, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });
            const url = URL.createObjectURL(dataBlob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'compression-report.json';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            
            // Clean up URL after a short delay
            setTimeout(() => URL.revokeObjectURL(url), 100);
            
            showNotification('Report saved as JSON', 'success');
        }

        // Copy first image to clipboard and open file picker
        async function handleCopyUpload() {
            if (files.length > 0) {
                // Copy the first image to clipboard
                try {
                    const file = files[0];
                    
                    if (navigator.clipboard && window.ClipboardItem) {
                        await navigator.clipboard.write([
                            new ClipboardItem({
                                [file.type]: file
                            })
                        ]);
                        showNotification('First image copied to clipboard!', 'success');
                    } else {
                        // Fallback for older browsers
                        const reader = new FileReader();
                        reader.onload = () => {
                            const tempTextArea = document.createElement('textarea');
                            tempTextArea.value = reader.result;
                            document.body.appendChild(tempTextArea);
                            tempTextArea.select();
                            document.execCommand('copy');
                            document.body.removeChild(tempTextArea);
                            showNotification('First image data URL copied to clipboard!', 'success');
                        };
                        reader.readAsDataURL(file);
                    }
                } catch (error) {
                    console.error('Error copying image to clipboard:', error);
                    showNotification('Failed to copy image to clipboard', 'error');
                }
            }
            
            // Always open file picker
            fileInput.click();
        }

        // Event Listeners
        uploadArea.addEventListener('click', () => {
            fileInput.click();
        });

        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragover');
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            handleFiles(e.dataTransfer.files);
        });

        fileInput.addEventListener('change', (e) => {
            handleFiles(e.target.files);
            // Reset file input to allow selecting the same file again
            e.target.value = '';
        });

        copyUploadBtn.addEventListener('click', handleCopyUpload);

        compressBtn.addEventListener('click', processAllImages);

        qualitySlider.addEventListener('input', () => {
            qualityValue.textContent = qualitySlider.value;
        });

        selectAllBtn.addEventListener('click', toggleSelectAll);

        downloadSelectedBtn.addEventListener('click', downloadSelectedImages);

        saveReportBtn.addEventListener('click', saveReport);

        // Initialize
        loadSettings();
    </script>
</body>
</html>
